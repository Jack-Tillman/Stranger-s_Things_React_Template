This file will hold all of my brainstorming notes that are not appropriate to keep as comments in the code, as well as layout ideas and such. 

Overall Data Flow: (copypasted from Learndot)

1)  Fetch initial data and build application state
2)    Build initial interface from application state
3)    Set up all event listeners for interface
    3.5)    Event listeners might transform interaction into API requests (THIS IS NEW)
4)  User interaction triggers event listeners, which in turn update data in multiple places:
    4.1)    Pass update requests to API (THIS IS NEW)
    4.2)    API returns success or failure for update
    4.3)    On success, update state to reflect change
    4.4)    On failure, render useful error message to user
5)    React Re-renders components based on updated state

Application Requirements:
Your task is to build out a Craigslist-Lite, complete with users, posts, and messages.

    Routes via React Router (This is a minimum; you could have more than just these routes. These routes may be named as you wish.):
        /posts
        /profile (with messages)
        /login and /register (this could alternatively be displayed in the profile instead of living in its own route)

    Unauthenticated Users should be able to:
        See a list of all posts
        Sign up for an account with username and password
        Sign in with correct username/password combination

    Unauthenticated Users should not be able to:
        Create a new post
        Delete any post
        Send a message to the author of any post

    Authenticated Users should be able to:
        Create a new post
        Delete a post for which they are the author
        Send a message to the author of any post for which they are not the author
        See all messages for any post for which they are the author
        See all messages they've received in a special view

    Authenticated Users should not be able to:
        Delete posts for which they are not the author
        Send a message to themselves

    All users should be able to:
        Filter posts with a simple text matcher (no fetch call needed here)

    Opportunity for EXTRA CREDIT of up to 5% added to your overall score. Authenticated Users would be delighted to be able to:
        Edit a post for which they are the author


Overall Development Path:
1. Begin with getting the posts to show 
2. Set up the home page
    - make skeletal structure (header, nav, main, form, buttons, etc)
    - Form has: username input, password input, password confirmation input
     - Set min property on password and username length, make them required on the form inputs
        - Provide feedback on the form if user provides non-valid usernames or passwords, OR 
        if user provides incorrect credentials 
        - If user enters info correctly, send an AJAX request to the backend, and upon successful user creation, you'll get a token 
        - useState to store the token and also store it in localStorage for auto-login 
        - that token will be sent with all future requests
    - Once registered, user should see a form to be able to log in and a button to log out 
** The presence of the token on State (of useState) will determine how the front end 
treats the user as logged in/ out, and it will thus determine what parts of the 
site are rendered 
- Potential useful helper functions: 

    logIn - which sets the token on state (and optionally in localStorage)
    logOut - which clears the token from the state (and from localStorage if we stored it there also)
    isLoggedIn - which lets you know if there's a current user logged in
    makeHeaders - which creates a headers object with our without the bearer token depending on what is on state

Progress Report (June 6, 6:30 PM)
Completed: 
- Rough draft of App.js, Posts, and Login
- Rough draft of CSS for App, Posts, Login
- Fetch requests for Posts.js work!

Immediate To Do: 
- Add a few more parts of post to show, such as date created and more 
- Refine Login (JS and CSS, focus on JS for now)
- Sit down and figure out rough guideline on props I will need and where to pass them 

Longterm To do:
- on focus and while active, have the 'Search Posts' placeholder text 'exit' 
the search field and go slightly above it

Progress Report (June 7, 6:30 PM wow consistent)
Completed:
- Really decent Register component - I might need to add required attributes to the inputs, but not sure 

Immediate To Do:
-Still gotta sit down and figure out rough guideline on props
- Refine Register css, add min property to username and PW length, make required 
- Refine Login to maybe use only one state for username and password
    - Perhaps make new prop to track if user is logged in or not (isLoggedIn, setIsLoggedIn)
- Add a few more parts of post to show, such as date created and more 

Rough Draft of Props needed:
FOR ALL:
isLoggedIn, setIsLoggedIn
username, setUsername

FOR POSTS:
searchResults, setSearchResults 

Progress Report Jun 8:
- Completed: 
Registration CSS looks much better! 
- Regex check for username to have only letters and numbers! 
- Made the button look much cleaner 
To Do
- Make the Login CSS similar to Register 
- Fetch requests for authentification!

Progress Report June 9:
-Completed: 
*Added conditional rendering to Appjs for LogIn and Posts! 
*Added conditional rendering to Navbar for Login and Register
*Got most of the fetch request for authentification done! Still some bugs to work out, though

To-Do
* Implement useEffect for Register 
* Fix issue where user registration fails on first attempt due to "username already taken" but works second time

Progress Report June 12: 
Completed (during class): 
* Fixed the issues with Register! Now the user can sign up, and the authToken is assigned to their userAccount. Additionally, 
the authToken is then stored in localStorage. 
* Touched up Register form prompts, so now there will be a prompt indicating the specifications that must be met 
for each input until the min - length is set. Can also incorporate the other checks as well later. 

Completed (after class):
* Created new component, AddNewPost, which will render when user clicks on Add new post link within Posts 
* Set up majority of the logic required for AddNewPost, alongside CSS for it as well. 
* Created (but did not test!) the makeHeaders helper function alongside the makePosts function 
* Refined the new post form, now all the inputs properly reflected in formInput and formInputError 
* Log out button clears storage

Short Term To-Do:
* Test both makeHeaders and makePosts functions - make sure to customize makePosts to be specific to the inputs 
* 

Long term To-Do:
* Improve the error messages for Registration page, Login, AddnewPost (make sure specific responses that are fully helpful, i.e. mention min and max length and no special characters )
* In Register.js, Login.js, and AddNewPost, refine the CSS for form input so that the prompts are useful without being too big.
* In Register.js, Login.js, and maybe AddNewPost maybe render the prompts as red upon page load, and then when conditions are met, they turn green

June 13 Pre-co working:
completed:
* can now make new posts! 
* new post submission form clears after submission 
- post co-working:
* created ViewPost.jsx and filled out some of it as template

todo:
* finish the layout of ViewPost.jsx then work on below
* figure out view post properly 
* conditionally render 'ADD NEW POST' based on whether isLoggedIn is true or whatever
* set up user feedback for when the post is created or failed to create 
* ideally, have the new post rise to the very top - might not be feasible without sorting the posts by chronological order

Long term To-Do:
* Improve the error messages for Registration page, Login, AddnewPost (make sure specific responses that are fully helpful, i.e. mention min and max length and no special characters )
* In Register.js, Login.js, and AddNewPost, refine the CSS for form input so that the prompts are useful without being too big.
* In Register.js, Login.js, and maybe AddNewPost maybe render the prompts as red upon page load, and then when conditions are met, they turn green

June 14 - Components, props, and state time. 
Components so far: 

Renderer: Index.js

What gets rendered: App.js

Home.js
Navbar.js
Login.js
Register.js
Profile.js
Posts.js
AddNewPost.jsx
ViewPost.jsx

States that exist, default values, file they're declared within,localStorage, and what they do

*DECLARED IN App.js
---
 const [isLoggedIn, setIsLoggedIn] = useState(false); - App.js. - This tracks whether the user is logged in or not. This prop is used to conditionally render the login/register links in nav bar or log out button.

 const [userAccount, setUserAccount] = useState({
    username: '', 
    password: '',
    isAuthenticated: false,
    _id: ''
  }); 
  ^ App.js - This prop stores the userAccount info when they register an account, or when they log in. This is used to determine whether user can make a new post, edit a post, or send a message within a single post view.

  const [showPost, setShowPost] = useState(''); - App.js; this is mainly used by the Posts and ViewPost components to determine whether to show the single post view or not.  

*DECLARED IN Login.js
---
const [username, setUsername] + [password,setPassword] - track user input for username and password, passed as arguments to setUserAccount upon successful log in 

*DECLARED IN Register.js 
---
[registerSuccess, setRegisterSuccess] - tracks whether the user successfully registered. If true, display welcome notification, otherwise render nothing 

[formInput, setFormInput] - tracks user's registration information they enter in input. Is used to ultimately create the account and get auth token 
[formError, setFormError] - tracks any errors user makes while inputting info, used to render more helpful notifications (password must be 8 characters long!)

localStorage sets username and id if successful registration. Id can be used to maintain login between sessions, but will have to figure this out: https://stackoverflow.com/questions/72222728/why-is-localstorage-getting-cleared-whenever-i-refresh-the-page

*DECLARED IN Posts.js 
---
none
USED:
After fetchPost is done, the returned value of all the posts is passed thru setPosts

